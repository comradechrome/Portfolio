<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Model</name>
    </assembly>
    <members>
        <member name="T:AgCubio.Cube">
            <summary>
            A cube contains:
            * A unique id
            * The position in space(x, y)
            * A color
            * A name -- if this is a player cube
            * A mass
            * A team ID (if the cube has been split)
            * Food status (is this cube food or a player)
            
            These should be derived properties based on mass:
            * Width, Top, Left, Right, Bottom
            </summary>
            
        </member>
        <member name="P:AgCubio.Cube.loc_x">
            <summary>
            x coordinate of the center of the cube
            </summary>
        </member>
        <member name="P:AgCubio.Cube.loc_y">
            <summary>
            y coordinate of the center of the cube
            </summary>
        </member>
        <member name="P:AgCubio.Cube.argb_color">
            <summary>
            integer representation of the ARGB color value
            </summary>
        </member>
        <member name="P:AgCubio.Cube.uid">
            <summary>
            Cube unique ID
            </summary>
        </member>
        <member name="P:AgCubio.Cube.food">
            <summary>
            true = Food
            false = Player
            </summary>
        </member>
        <member name="P:AgCubio.Cube.Name">
            <summary>
            The name on the cube - if food, the name will be an empty string
            </summary>
        </member>
        <member name="P:AgCubio.Cube.Mass">
            <summary>
            mass of the cube - if set attempts a value less than 1, we'll default to 1
            </summary>
        </member>
        <member name="P:AgCubio.Cube.team_id">
            <summary>
            If cube has been split, this will be the origial cube ID on all split cube instances
            </summary>
        </member>
        <member name="P:AgCubio.Cube.Width">
            <summary>
            Width is the square root of the mass.
            Width is a read only property
            </summary>
        </member>
        <member name="M:AgCubio.Cube.#ctor(System.Double,System.Double,System.Int32,System.Int32,System.Int32,System.Boolean,System.String,System.Double)">
            <summary>
            Default contructor of the cube object
            </summary>
            <param name="loc_x"></param>
            <param name="loc_y"></param>
            <param name="argb_color"></param>
            <param name="uid"></param>
            <param name="team_id"></param>
            <param name="food"></param>
            <param name="name"></param>
            <param name="mass"></param>
        </member>
        <member name="T:AgCubio.World">
            <summary>
            Represents 'State' of world. Responsible for tracking:
            * the world Width and Height (read only 'constants')
            * all the worldCubes in the game.
            * all split cubes for our player
            </summary>
        </member>
        <member name="P:AgCubio.World.worldHeight">
            <summary>
            total height of the world
            </summary>
        </member>
        <member name="P:AgCubio.World.worldWidth">
            <summary>
            total width of the world
            </summary>
        </member>
        <member name="P:AgCubio.World.ourID">
            <summary>
            Our players UID
            </summary>
        </member>
        <member name="P:AgCubio.World.worldCubes">
            <summary>
            Dictionary of all the worlds cubes. Index by Cube ID
            </summary>
        </member>
        <member name="P:AgCubio.World.ourCubes">
            <summary>
            Dictionary of our split cubes - will always contain our initial cube
            As cube plits, it will be indexed by Cube_id, but all team_id's should be our original UID
            </summary>
        </member>
        <member name="M:AgCubio.World.#ctor(System.Int32,System.Int32)">
            <summary>
            Default contructor for our World object
            </summary>
            <param name="hieght"></param>
            <param name="width"></param>
        </member>
        <member name="M:AgCubio.World.addCube(AgCubio.Cube)">
            <summary>
            Add worldCubes to our cube dictionary. Key is the cube UID. Also check the cube team ID.
            If the team ID is the same as our UID, add it to the ourCubes Dictionary
            </summary>
            <param name="cube"></param>
        </member>
        <member name="M:AgCubio.World.moveCube(AgCubio.Cube)">
            <summary>
            move the position and weight of a cube
            </summary>
            <param name="cube"></param>
        </member>
        <member name="M:AgCubio.World.removeCube(AgCubio.Cube)">
            <summary>
            remove a cube from the world object
            </summary>
            <param name="cube"></param>
        </member>
        <member name="M:AgCubio.World.processCube(System.String)">
            <summary>
            Main worker method for our world object. Processing begins by converting a JSON string to a cube object.
            Check mass - if zero delete cube. (we have already cecked if our cube is mass=zero in the view as this will end the game).
            If the cube has mass and already eists, we move ... otherwise we add the cube to the world.
            </summary>
            <param name="jsonCube"></param>
        </member>
        <member name="M:AgCubio.World.getOurCubesAverage">
            <summary>
            Determines the average x,y coordiantes of our cube(s)
            Determines the maximum of our cube(s) height and width
            These three values are returned as a Tuple
            </summary>
            <returns>Tuple of the average x, y, and max width of our cube(s) </returns>
        </member>
    </members>
</doc>
