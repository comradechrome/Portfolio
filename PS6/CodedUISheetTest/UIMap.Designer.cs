// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUISheetTest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// BasicMenuTest - Use 'BasicMenuTestParams' to pass parameters into this method.
        /// </summary>
        public void BasicMenuTest()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISheetWindow.UIItemWindow1.UIItemEdit;
            WinButton uIOKButton = this.UICellErrorWindow.UIOKWindow.UIOKButton;
            WinMenuItem uISpreadsheetUsageMenuItem = this.UISheetWindow.UIFileMenuStripMenuBar.UIHelpMenuItem.UISpreadsheetUsageMenuItem;
            WinButton uIOKButton1 = this.UIUsageWindow.UIOKWindow.UIOKButton;
            WinMenuItem uIAboutSpreadsheetMenuItem = this.UISheetWindow.UIFileMenuStripMenuBar.UIHelpMenuItem.UIAboutSpreadsheetMenuItem;
            WinButton uIOKButton2 = this.UIAboutWindow.UIOKWindow.UIOKButton;
            WinMenuItem uINewMenuItem = this.UISheetWindow.UIFileMenuStripMenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uICloseMenuItem = this.UISheetWindow1.UIFileMenuStripMenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uICloseButton = this.UISheetWindow.UISheetTitleBar.UICloseButton;
            WinButton uINOButton = this.UIUnsavedWarningWindow.UINOWindow.UINOButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\CS3500\GitRepo\ellefsakishev\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISheetWindow = ApplicationUnderTest.Launch(this.BasicMenuTestParams.UISheetWindowExePath, this.BasicMenuTestParams.UISheetWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(81, 36));

            // Type '1' in text box
            uIItemEdit.Text = this.BasicMenuTestParams.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.BasicMenuTestParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(136, 41));

            // Type 'a' in text box
            uIItemEdit.Text = this.BasicMenuTestParams.UIItemEditText1;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.BasicMenuTestParams.UIItemEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(208, 37));

            // Type 'A1' in text box
            uIItemEdit.Text = this.BasicMenuTestParams.UIItemEditText2;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(292, 38));

            // Type '=h3' in text box
            uIItemEdit.Text = this.BasicMenuTestParams.UIItemEditText3;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.BasicMenuTestParams.UIItemEditSendKeys2, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(26, 8));

            // Click 'Help' -> 'Spreadsheet Usage' menu item
            Mouse.Click(uISpreadsheetUsageMenuItem, new Point(46, 2));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(18, 9));

            // Click 'Help' -> 'About Spreadsheet' menu item
            Mouse.Click(uIAboutSpreadsheetMenuItem, new Point(99, 9));

            // Click 'OK' button
            Mouse.Click(uIOKButton2, new Point(28, 8));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(40, 7));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(57, 7));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(21, 16));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(23, 9));
        }
        
        /// <summary>
        /// prepForAssertions - Use 'prepForAssertionsParams' to pass parameters into this method.
        /// </summary>
        public void prepForAssertions()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISheetWindow.UIItemWindow1.UIItemEdit;
            WinButton uIEnterButton = this.UISheetWindow.UIEnterWindow.UIEnterButton;
            WinButton uIOKButton = this.UICellErrorWindow.UIOKWindow.UIOKButton;
            #endregion

            // Launch '%USERPROFILE%\Documents\CS3500\GitRepo\ellefsakishev\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.prepForAssertionsParams.ExePath, this.prepForAssertionsParams.AlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(78, 42));

            // Type '1' in text box
            uIItemEdit.Text = this.prepForAssertionsParams.UIItemEditText;

            // Click 'Enter' button
            Mouse.Click(uIEnterButton, new Point(32, 11));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(168, 37));

            // Type 'a' in text box
            uIItemEdit.Text = this.prepForAssertionsParams.UIItemEditText1;

            // Click 'Enter' button
            Mouse.Click(uIEnterButton, new Point(27, 10));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(235, 39));

            // Type '0' in text box
            uIItemEdit.Text = this.prepForAssertionsParams.UIItemEditText2;

            // Click 'Enter' button
            Mouse.Click(uIEnterButton, new Point(27, 10));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(323, 39));

            // Type '=a1+c1' in text box
            uIItemEdit.Text = this.prepForAssertionsParams.UIItemEditText3;

            // Click 'Enter' button
            Mouse.Click(uIEnterButton, new Point(33, 10));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(402, 39));

            // Type '=a1/c1' in text box
            uIItemEdit.Text = this.prepForAssertionsParams.UIItemEditText4;

            // Click 'Enter' button
            Mouse.Click(uIEnterButton, new Point(26, 13));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(31, 11));
        }
        
        /// <summary>
        /// AssertFormulaError - Use 'AssertFormulaErrorExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertFormulaError()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISheetWindow.UIA1Window.UIItemEdit;
            WinEdit uIItemEdit1 = this.UISheetWindow.UIItemWindow2.UIItemEdit;
            WinEdit uIItemEdit2 = this.UISheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Verify that the 'ReadOnly' property of text box equals 'True'
            Assert.AreEqual(this.AssertFormulaErrorExpectedValues.UIItemEditReadOnly, uIItemEdit.ReadOnly);

            // Verify that the 'Text' property of text box equals 'E1'
            Assert.AreEqual(this.AssertFormulaErrorExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that the 'ReadOnly' property of text box equals 'True'
            Assert.AreEqual(this.AssertFormulaErrorExpectedValues.UIItemEditReadOnly1, uIItemEdit1.ReadOnly);

            // Verify that the 'Text' property of text box equals 'SpreadsheetUtilities.FormulaError'
            Assert.AreEqual(this.AssertFormulaErrorExpectedValues.UIItemEditText1, uIItemEdit1.Text);

            // Verify that the 'ReadOnly' property of text box equals 'False'
            Assert.AreEqual(this.AssertFormulaErrorExpectedValues.UIItemEditReadOnly2, uIItemEdit2.ReadOnly);

            // Verify that the 'Text' property of text box equals 'A1/C1'
            Assert.AreEqual(this.AssertFormulaErrorExpectedValues.UIItemEditText2, uIItemEdit2.Text);
        }
        
        /// <summary>
        /// prepForAssertions1
        /// </summary>
        public void prepForAssertions1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISheetWindow.UIItemWindow2.UIItemEdit;
            WinEdit uIItemEdit1 = this.UISheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(74, 36));

            // Click text box
            Mouse.Click(uIItemEdit, new Point(18, 9));

            // Click text box
            Mouse.Click(uIItemEdit1, new Point(32, 9));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(77, 39));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(163, 41));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(86, 39));
        }
        
        /// <summary>
        /// AssertDouble - Use 'AssertDoubleExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertDouble()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISheetWindow.UIA1Window.UIItemEdit;
            WinEdit uIItemEdit1 = this.UISheetWindow.UIItemWindow2.UIItemEdit;
            WinEdit uIItemEdit2 = this.UISheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'A1'
            Assert.AreEqual(this.AssertDoubleExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that the 'Text' property of text box equals '1'
            Assert.AreEqual(this.AssertDoubleExpectedValues.UIItemEditText1, uIItemEdit1.Text);

            // Verify that the 'Text' property of text box equals '1'
            Assert.AreEqual(this.AssertDoubleExpectedValues.UIItemEditText2, uIItemEdit2.Text);
        }
        
        /// <summary>
        /// prepForAssertions2
        /// </summary>
        public void prepForAssertions2()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISheetWindow.UIItemWindow1.UIItemEdit;
            WinEdit uIItemEdit1 = this.UISheetWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(160, 39));

            // Click text box
            Mouse.Click(uIItemEdit, new Point(14, 5));

            // Click text box
            Mouse.Click(uIItemEdit1, new Point(113, 5));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(161, 37));
        }
        
        /// <summary>
        /// AssertString - Use 'AssertStringExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertString()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISheetWindow.UIA1Window.UIItemEdit;
            WinEdit uIItemEdit1 = this.UISheetWindow.UIItemWindow2.UIItemEdit;
            WinEdit uIItemEdit2 = this.UISheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'B1'
            Assert.AreEqual(this.AssertStringExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that the 'Text' property of text box equals 'a'
            Assert.AreEqual(this.AssertStringExpectedValues.UIItemEditText1, uIItemEdit1.Text);

            // Verify that the 'Text' property of text box equals 'a'
            Assert.AreEqual(this.AssertStringExpectedValues.UIItemEditText2, uIItemEdit2.Text);
        }
        
        /// <summary>
        /// prepForAssertions3
        /// </summary>
        public void prepForAssertions3()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISheetWindow.UIItemWindow1.UIItemEdit;
            WinEdit uIItemEdit1 = this.UISheetWindow.UIItemWindow2.UIItemEdit;
            #endregion

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(296, 36));

            // Click text box
            Mouse.Click(uIItemEdit, new Point(43, 10));

            // Click text box
            Mouse.Click(uIItemEdit1, new Point(64, 4));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(295, 37));
        }
        
        /// <summary>
        /// AssertFormula - Use 'AssertFormulaExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertFormula()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISheetWindow.UIA1Window.UIItemEdit;
            WinEdit uIItemEdit1 = this.UISheetWindow.UIItemWindow2.UIItemEdit;
            WinEdit uIItemEdit2 = this.UISheetWindow.UIItemWindow1.UIItemEdit;
            #endregion

            // Verify that the 'Text' property of text box equals 'D1'
            Assert.AreEqual(this.AssertFormulaExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that the 'Text' property of text box equals '1'
            Assert.AreEqual(this.AssertFormulaExpectedValues.UIItemEditText1, uIItemEdit1.Text);

            // Verify that the 'Text' property of text box equals 'A1+C1'
            Assert.AreEqual(this.AssertFormulaExpectedValues.UIItemEditText2, uIItemEdit2.Text);
        }
        
        /// <summary>
        /// prepForAssertions4
        /// </summary>
        public void prepForAssertions4()
        {
            #region Variable Declarations
            WinMenuItem uICloseMenuItem = this.UISheetWindow.UIFileMenuStripMenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uINOButton = this.UIUnsavedWarningWindow.UINOWindow.UINOButton;
            #endregion

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(56, 8));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(33, 10));
        }
        
        /// <summary>
        /// SaveCloseTests - Use 'SaveCloseTestsParams' to pass parameters into this method.
        /// </summary>
        public void SaveCloseTests()
        {
            #region Variable Declarations
            WinMenuItem uINewMenuItem = this.UISheetWindow.UIFileMenuStripMenuBar.UIFileMenuItem.UINewMenuItem;
            WinClient uISpreadsheetPanel1Client = this.UISheetWindow1.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISheetWindow1.UIItemWindow1.UIItemEdit;
            WinButton uIOKButton = this.UICellErrorWindow.UIOKWindow.UIOKButton;
            WinMenuBar uIFileMenuStripMenuBar = this.UISheetWindow1.UIMenuStrip1Window.UIFileMenuStripMenuBar;
            WinMenuItem uINewMenuItem1 = this.UISheetWindow1.UIFileMenuStripMenuBar.UIFileMenuItem.UINewMenuItem;
            WinMenuItem uIFileMenuItem = this.UISheetWindow2.UIFileMenuStripMenuBar.UIFileMenuItem;
            WinClient uISpreadsheetPanel1Client1 = this.UISheetWindow2.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit1 = this.UISheetWindow2.UIItemWindow1.UIItemEdit;
            WinMenuItem uICloseMenuItem = this.UISheetWindow2.UIFileMenuStripMenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uINOButton = this.UIUnsavedWarningWindow.UINOWindow.UINOButton;
            WinClient uISpreadsheetPanel1Client2 = this.UISheetWindow2.UISpreadsheetPanel1Window.UISpreadsheetPanel1Client;
            WinButton uICloseButton = this.UISheetWindow2.UISheetTitleBar.UICloseButton;
            WinButton uIYesButton = this.UIUnsavedWarningWindow.UIYesWindow.UIYesButton;
            WinButton uICancelButton = this.UISaveAsWindow.UICancelWindow.UICancelButton;
            WinButton uIOKButton1 = this.UISaveErrorWindow.UIOKWindow.UIOKButton;
            WinMenuItem uISaveAsMenuItem = this.UISheetWindow1.UIFileMenuStripMenuBar.UIFileMenuItem.UISaveAsMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uINOButton1 = this.UINOWindow.UINOButton;
            WinButton uIYesButton1 = this.UIYesWindow.UIYesButton;
            WinMenuItem uISaveMenuItem = this.UISheetWindow1.UIFileMenuStripMenuBar.UIFileMenuItem.UISaveMenuItem;
            WinMenuItem uIOpenMenuItem = this.UISheetWindow1.UIFileMenuStripMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UITest1sprdListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinMenuItem uICloseMenuItem1 = this.UISheetWindow1.UIFileMenuStripMenuBar.UIFileMenuItem.UICloseMenuItem;
            WinClient uISpreadsheetPanel1Client3 = this.UISheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit2 = this.UISheetWindow.UIItemWindow1.UIItemEdit;
            WinMenuItem uIOpenMenuItem1 = this.UISheetWindow.UIFileMenuStripMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinSplitButton uIOpenSplitButton1 = this.UIOpenWindow.UIOpenWindow2.UIOpenSplitButton;
            WinMenuItem uICloseMenuItem2 = this.UISheetWindow.UIFileMenuStripMenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Launch '%USERPROFILE%\Documents\CS3500\GitRepo\ellefsakishev\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest spreadsheetGUIApplication = ApplicationUnderTest.Launch(this.SaveCloseTestsParams.ExePath, this.SaveCloseTestsParams.AlternateExePath);

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(39, 8));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(79, 38));

            // Type '1' in text box
            uIItemEdit.Text = this.SaveCloseTestsParams.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.SaveCloseTestsParams.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(70, 55));

            // Type '0' in text box
            uIItemEdit.Text = this.SaveCloseTestsParams.UIItemEditText1;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.SaveCloseTestsParams.UIItemEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(134, 57));

            // Type '=a1/a2' in text box
            uIItemEdit.Text = this.SaveCloseTestsParams.UIItemEditText2;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.SaveCloseTestsParams.UIItemEditSendKeys2, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(43, 13));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(227, 58));

            // Type '=c1' in text box
            uIItemEdit.Text = this.SaveCloseTestsParams.UIItemEditText3;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.SaveCloseTestsParams.UIItemEditSendKeys3, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(29, 3));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(303, 56));

            // Move 'spreadsheetPanel1' client to 'fileMenuStrip' menu bar
            uIFileMenuStripMenuBar.EnsureClickable(new Point(105, 23));
            Mouse.StartDragging(uISpreadsheetPanel1Client, new Point(165, 8));
            Mouse.StopDragging(uIFileMenuStripMenuBar, new Point(105, 23));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem1, new Point(41, 7));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(16, 4));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(81, 99));

            // Type '1' in text box
            uIItemEdit1.Text = this.SaveCloseTestsParams.UIItemEditText4;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit1, this.SaveCloseTestsParams.UIItemEditSendKeys4, ModifierKeys.None);

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(57, 9));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(38, 3));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem1, new Point(39, 16));

            // Type '1{Enter}' in 'spreadsheetPanel1' client
            Keyboard.SendKeys(uISpreadsheetPanel1Client2, this.SaveCloseTestsParams.UISpreadsheetPanel1ClientSendKeys, ModifierKeys.None);

            // Double-Click 'spreadsheetPanel1' client
            Mouse.DoubleClick(uISpreadsheetPanel1Client1, new Point(149, 130));

            // Type '1' in text box
            uIItemEdit1.Text = this.SaveCloseTestsParams.UIItemEditText5;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit1, this.SaveCloseTestsParams.UIItemEditSendKeys5, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client1, new Point(149, 130));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(20, 12));

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(23, 10));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(22, 10));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(45, 9));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(27, 9));

            // Click 'File' -> 'Save As ...' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(54, 5));

            // Select 'test1' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveCloseTestsParams.UIFilenameComboBoxEditableItem;

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(28, 10));

            // Click '&No' button
            Mouse.Click(uINOButton1, new Point(18, 10));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(22, 6));

            // Click '&Yes' button
            Mouse.Click(uIYesButton1, new Point(39, 10));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(60, 82));

            // Type '1' in text box
            uIItemEdit.Text = this.SaveCloseTestsParams.UIItemEditText6;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.SaveCloseTestsParams.UIItemEditSendKeys6, ModifierKeys.None);

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(63, 18));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(60, 11));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(21, 6));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(29, 9));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem1, new Point(60, 7));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(50, 10));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client3, new Point(77, 39));

            // Type '1' in text box
            uIItemEdit2.Text = this.SaveCloseTestsParams.UIItemEditText7;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit2, this.SaveCloseTestsParams.UIItemEditSendKeys7, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client3, new Point(78, 57));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem1, new Point(51, 9));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(29, 10));

            // Click 'Name' text box
            Mouse.Click(uINameEdit, new Point(22, 20));

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton1, new Point(31, 15));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem2, new Point(60, 11));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(16, 8));
        }
        
        /// <summary>
        /// AdditionalTests1 - Use 'AdditionalTests1Params' to pass parameters into this method.
        /// </summary>
        public void AdditionalTests1()
        {
            #region Variable Declarations
            WinClient uISpreadsheetPanel1Client = this.UISheetWindow.UIItemWindow.UISpreadsheetPanel1Client;
            WinEdit uIItemEdit = this.UISheetWindow.UIItemWindow1.UIItemEdit;
            WinButton uIOKButton = this.UICellErrorWindow.UIOKWindow.UIOKButton;
            WinMenuItem uIOpenMenuItem = this.UISheetWindow.UIFileMenuStripMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinButton uIYesButton = this.UIUnsavedWarningWindow.UIYesWindow.UIYesButton;
            WinControl uIUnsavedWarningDialog = this.UIUnsavedWarningWindow.UIUnsavedWarningDialog;
            WinButton uINOButton = this.UIUnsavedWarningWindow.UINOWindow.UINOButton;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow1.UIFilenameComboBox;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinButton uIOKButton1 = this.UIOpenWindow1.UIOpenPane.UIOKButton;
            WinButton uICancelButton = this.UIOpenWindow.UICancelWindow.UICancelButton;
            WinMenuItem uICloseMenuItem = this.UISheetWindow.UIFileMenuStripMenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Launch '%USERPROFILE%\Documents\CS3500\GitRepo\ellefsakishev\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISheetWindow = ApplicationUnderTest.Launch(this.AdditionalTests1Params.UISheetWindowExePath, this.AdditionalTests1Params.UISheetWindowAlternateExePath);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(232, 121));

            // Type '=@#' in text box
            uIItemEdit.Text = this.AdditionalTests1Params.UIItemEditText;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.AdditionalTests1Params.UIItemEditSendKeys, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(27, 7));

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(319, 118));

            // Type '2' in text box
            uIItemEdit.Text = this.AdditionalTests1Params.UIItemEditText1;

            // Type '{Enter}' in text box
            Keyboard.SendKeys(uIItemEdit, this.AdditionalTests1Params.UIItemEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(225, 136));

            // Type '' in text box
            uIItemEdit.Text = this.AdditionalTests1Params.UIItemEditText2;

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(136, 59));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(48, 11));

            // Move '&Yes' button to 'Unsaved Warning' Dialog
            uIUnsavedWarningDialog.EnsureClickable(new Point(376, 112));
            Mouse.StartDragging(uIYesButton, new Point(73, 16));
            Mouse.StopDragging(uIUnsavedWarningDialog, new Point(376, 112));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(37, 12));

            // Select 'badfilename' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.AdditionalTests1Params.UIFilenameComboBoxEditableItem;

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(25, 4));

            // Click 'OK' button
            Mouse.Click(uIOKButton1, new Point(21, 8));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(24, 12));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(65, 6));

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(33, 12));
        }
        
        #region Properties
        public virtual BasicMenuTestParams BasicMenuTestParams
        {
            get
            {
                if ((this.mBasicMenuTestParams == null))
                {
                    this.mBasicMenuTestParams = new BasicMenuTestParams();
                }
                return this.mBasicMenuTestParams;
            }
        }
        
        public virtual prepForAssertionsParams prepForAssertionsParams
        {
            get
            {
                if ((this.mprepForAssertionsParams == null))
                {
                    this.mprepForAssertionsParams = new prepForAssertionsParams();
                }
                return this.mprepForAssertionsParams;
            }
        }
        
        public virtual AssertFormulaErrorExpectedValues AssertFormulaErrorExpectedValues
        {
            get
            {
                if ((this.mAssertFormulaErrorExpectedValues == null))
                {
                    this.mAssertFormulaErrorExpectedValues = new AssertFormulaErrorExpectedValues();
                }
                return this.mAssertFormulaErrorExpectedValues;
            }
        }
        
        public virtual AssertDoubleExpectedValues AssertDoubleExpectedValues
        {
            get
            {
                if ((this.mAssertDoubleExpectedValues == null))
                {
                    this.mAssertDoubleExpectedValues = new AssertDoubleExpectedValues();
                }
                return this.mAssertDoubleExpectedValues;
            }
        }
        
        public virtual AssertStringExpectedValues AssertStringExpectedValues
        {
            get
            {
                if ((this.mAssertStringExpectedValues == null))
                {
                    this.mAssertStringExpectedValues = new AssertStringExpectedValues();
                }
                return this.mAssertStringExpectedValues;
            }
        }
        
        public virtual AssertFormulaExpectedValues AssertFormulaExpectedValues
        {
            get
            {
                if ((this.mAssertFormulaExpectedValues == null))
                {
                    this.mAssertFormulaExpectedValues = new AssertFormulaExpectedValues();
                }
                return this.mAssertFormulaExpectedValues;
            }
        }
        
        public virtual SaveCloseTestsParams SaveCloseTestsParams
        {
            get
            {
                if ((this.mSaveCloseTestsParams == null))
                {
                    this.mSaveCloseTestsParams = new SaveCloseTestsParams();
                }
                return this.mSaveCloseTestsParams;
            }
        }
        
        public virtual AdditionalTests1Params AdditionalTests1Params
        {
            get
            {
                if ((this.mAdditionalTests1Params == null))
                {
                    this.mAdditionalTests1Params = new AdditionalTests1Params();
                }
                return this.mAdditionalTests1Params;
            }
        }
        
        public UISheetWindow UISheetWindow
        {
            get
            {
                if ((this.mUISheetWindow == null))
                {
                    this.mUISheetWindow = new UISheetWindow();
                }
                return this.mUISheetWindow;
            }
        }
        
        public UICellErrorWindow UICellErrorWindow
        {
            get
            {
                if ((this.mUICellErrorWindow == null))
                {
                    this.mUICellErrorWindow = new UICellErrorWindow();
                }
                return this.mUICellErrorWindow;
            }
        }
        
        public UIUsageWindow UIUsageWindow
        {
            get
            {
                if ((this.mUIUsageWindow == null))
                {
                    this.mUIUsageWindow = new UIUsageWindow();
                }
                return this.mUIUsageWindow;
            }
        }
        
        public UIAboutWindow UIAboutWindow
        {
            get
            {
                if ((this.mUIAboutWindow == null))
                {
                    this.mUIAboutWindow = new UIAboutWindow();
                }
                return this.mUIAboutWindow;
            }
        }
        
        public UISheetWindow1 UISheetWindow1
        {
            get
            {
                if ((this.mUISheetWindow1 == null))
                {
                    this.mUISheetWindow1 = new UISheetWindow1();
                }
                return this.mUISheetWindow1;
            }
        }
        
        public UIUnsavedWarningWindow UIUnsavedWarningWindow
        {
            get
            {
                if ((this.mUIUnsavedWarningWindow == null))
                {
                    this.mUIUnsavedWarningWindow = new UIUnsavedWarningWindow();
                }
                return this.mUIUnsavedWarningWindow;
            }
        }
        
        public UISheetWindow2 UISheetWindow2
        {
            get
            {
                if ((this.mUISheetWindow2 == null))
                {
                    this.mUISheetWindow2 = new UISheetWindow2();
                }
                return this.mUISheetWindow2;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UISaveErrorWindow UISaveErrorWindow
        {
            get
            {
                if ((this.mUISaveErrorWindow == null))
                {
                    this.mUISaveErrorWindow = new UISaveErrorWindow();
                }
                return this.mUISaveErrorWindow;
            }
        }
        
        public UINOWindow1 UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow1();
                }
                return this.mUINOWindow;
            }
        }
        
        public UIYesWindow1 UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow1();
                }
                return this.mUIYesWindow;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIOpenWindow11 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow11();
                }
                return this.mUIOpenWindow1;
            }
        }
        #endregion
        
        #region Fields
        private BasicMenuTestParams mBasicMenuTestParams;
        
        private prepForAssertionsParams mprepForAssertionsParams;
        
        private AssertFormulaErrorExpectedValues mAssertFormulaErrorExpectedValues;
        
        private AssertDoubleExpectedValues mAssertDoubleExpectedValues;
        
        private AssertStringExpectedValues mAssertStringExpectedValues;
        
        private AssertFormulaExpectedValues mAssertFormulaExpectedValues;
        
        private SaveCloseTestsParams mSaveCloseTestsParams;
        
        private AdditionalTests1Params mAdditionalTests1Params;
        
        private UISheetWindow mUISheetWindow;
        
        private UICellErrorWindow mUICellErrorWindow;
        
        private UIUsageWindow mUIUsageWindow;
        
        private UIAboutWindow mUIAboutWindow;
        
        private UISheetWindow1 mUISheetWindow1;
        
        private UIUnsavedWarningWindow mUIUnsavedWarningWindow;
        
        private UISheetWindow2 mUISheetWindow2;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UISaveErrorWindow mUISaveErrorWindow;
        
        private UINOWindow1 mUINOWindow;
        
        private UIYesWindow1 mUIYesWindow;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UIOpenWindow11 mUIOpenWindow1;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicMenuTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class BasicMenuTestParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\CS3500\GitRepo\ellefsakishev\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISheetWindowExePath = @"..\\..\\..\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\CS3500\GitRepo\ellefsakishev\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISheetWindowAlternateExePath = @"..\\..\\..\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";

      /// <summary>
      /// Type '1' in text box
      /// </summary>
      public string UIItemEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'a' in text box
        /// </summary>
        public string UIItemEditText1 = "a";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type 'A1' in text box
        /// </summary>
        public string UIItemEditText2 = "A1";
        
        /// <summary>
        /// Type '=h3' in text box
        /// </summary>
        public string UIItemEditText3 = "=h3";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'prepForAssertions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class prepForAssertionsParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\CS3500\GitRepo\ellefsakishev\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = @"..\\..\\..\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";

      /// <summary>
      /// Launch '%USERPROFILE%\Documents\CS3500\GitRepo\ellefsakishev\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
      /// </summary>
      public string AlternateExePath = @"..\\..\\..\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";

      /// <summary>
      /// Type '1' in text box
      /// </summary>
      public string UIItemEditText = "1";
        
        /// <summary>
        /// Type 'a' in text box
        /// </summary>
        public string UIItemEditText1 = "a";
        
        /// <summary>
        /// Type '0' in text box
        /// </summary>
        public string UIItemEditText2 = "0";
        
        /// <summary>
        /// Type '=a1+c1' in text box
        /// </summary>
        public string UIItemEditText3 = "=a1+c1";
        
        /// <summary>
        /// Type '=a1/c1' in text box
        /// </summary>
        public string UIItemEditText4 = "=a1/c1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFormulaError'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertFormulaErrorExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ReadOnly' property of text box equals 'True'
        /// </summary>
        public bool UIItemEditReadOnly = true;
        
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'E1'
        /// </summary>
        public string UIItemEditText = "E1";
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of text box equals 'True'
        /// </summary>
        public bool UIItemEditReadOnly1 = true;
        
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'SpreadsheetUtilities.FormulaError'
        /// </summary>
        public string UIItemEditText1 = "SpreadsheetUtilities.FormulaError";
        
        /// <summary>
        /// Verify that the 'ReadOnly' property of text box equals 'False'
        /// </summary>
        public bool UIItemEditReadOnly2 = false;
        
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'A1/C1'
        /// </summary>
        public string UIItemEditText2 = "A1/C1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertDouble'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertDoubleExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'A1'
        /// </summary>
        public string UIItemEditText = "A1";
        
        /// <summary>
        /// Verify that the 'Text' property of text box equals '1'
        /// </summary>
        public string UIItemEditText1 = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of text box equals '1'
        /// </summary>
        public string UIItemEditText2 = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertString'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertStringExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'B1'
        /// </summary>
        public string UIItemEditText = "B1";
        
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'a'
        /// </summary>
        public string UIItemEditText1 = "a";
        
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'a'
        /// </summary>
        public string UIItemEditText2 = "a";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertFormula'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertFormulaExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'D1'
        /// </summary>
        public string UIItemEditText = "D1";
        
        /// <summary>
        /// Verify that the 'Text' property of text box equals '1'
        /// </summary>
        public string UIItemEditText1 = "1";
        
        /// <summary>
        /// Verify that the 'Text' property of text box equals 'A1+C1'
        /// </summary>
        public string UIItemEditText2 = "A1+C1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveCloseTests'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SaveCloseTestsParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\CS3500\GitRepo\ellefsakishev\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string ExePath = @"..\\..\\..\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";

      /// <summary>
      /// Launch '%USERPROFILE%\Documents\CS3500\GitRepo\ellefsakishev\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
      /// </summary>
      public string AlternateExePath = @"..\\..\\..\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";

      /// <summary>
      /// Type '1' in text box
      /// </summary>
      public string UIItemEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '0' in text box
        /// </summary>
        public string UIItemEditText1 = "0";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=a1/a2' in text box
        /// </summary>
        public string UIItemEditText2 = "=a1/a2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '=c1' in text box
        /// </summary>
        public string UIItemEditText3 = "=c1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '1' in text box
        /// </summary>
        public string UIItemEditText4 = "1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '1{Enter}' in 'spreadsheetPanel1' client
        /// </summary>
        public string UISpreadsheetPanel1ClientSendKeys = "1{Enter}";
        
        /// <summary>
        /// Type '1' in text box
        /// </summary>
        public string UIItemEditText5 = "1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys5 = "{Enter}";
        
        /// <summary>
        /// Select 'test1' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test1";
        
        /// <summary>
        /// Type '1' in text box
        /// </summary>
        public string UIItemEditText6 = "1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys6 = "{Enter}";
        
        /// <summary>
        /// Type '1' in text box
        /// </summary>
        public string UIItemEditText7 = "1";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys7 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AdditionalTests1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AdditionalTests1Params
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\CS3500\GitRepo\ellefsakishev\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISheetWindowExePath = @"..\\..\\..\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";

      /// <summary>
      /// Launch '%USERPROFILE%\Documents\CS3500\GitRepo\ellefsakishev\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
      /// </summary>
      public string UISheetWindowAlternateExePath = @"..\\..\\..\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";

      /// <summary>
      /// Type '=@#' in text box
      /// </summary>
      public string UIItemEditText = "=@#";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '2' in text box
        /// </summary>
        public string UIItemEditText1 = "2";
        
        /// <summary>
        /// Type '{Enter}' in text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '' in text box
        /// </summary>
        public string UIItemEditText2 = "";
        
        /// <summary>
        /// Select 'badfilename' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "badfilename";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISheetWindow : WinWindow
    {
        
        public UISheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Sheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIFileMenuStripMenuBar UIFileMenuStripMenuBar
        {
            get
            {
                if ((this.mUIFileMenuStripMenuBar == null))
                {
                    this.mUIFileMenuStripMenuBar = new UIFileMenuStripMenuBar(this);
                }
                return this.mUIFileMenuStripMenuBar;
            }
        }
        
        public UISheetTitleBar UISheetTitleBar
        {
            get
            {
                if ((this.mUISheetTitleBar == null))
                {
                    this.mUISheetTitleBar = new UISheetTitleBar(this);
                }
                return this.mUISheetTitleBar;
            }
        }
        
        public UIEnterWindow UIEnterWindow
        {
            get
            {
                if ((this.mUIEnterWindow == null))
                {
                    this.mUIEnterWindow = new UIEnterWindow(this);
                }
                return this.mUIEnterWindow;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIFileMenuStripMenuBar mUIFileMenuStripMenuBar;
        
        private UISheetTitleBar mUISheetTitleBar;
        
        private UIEnterWindow mUIEnterWindow;
        
        private UIA1Window mUIA1Window;
        
        private UIItemWindow2 mUIItemWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuStripMenuBar : WinMenuBar
    {
        
        public UIFileMenuStripMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public UIHelpMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new UIHelpMenuItem(this);
                }
                return this.mUIHelpMenuItem;
            }
        }
        
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIHelpMenuItem mUIHelpMenuItem;
        
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHelpMenuItem : WinMenuItem
    {
        
        public UIHelpMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISpreadsheetUsageMenuItem
        {
            get
            {
                if ((this.mUISpreadsheetUsageMenuItem == null))
                {
                    this.mUISpreadsheetUsageMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetUsageMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Spreadsheet Usage";
                    this.mUISpreadsheetUsageMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISpreadsheetUsageMenuItem.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUISpreadsheetUsageMenuItem;
            }
        }
        
        public WinMenuItem UIAboutSpreadsheetMenuItem
        {
            get
            {
                if ((this.mUIAboutSpreadsheetMenuItem == null))
                {
                    this.mUIAboutSpreadsheetMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIAboutSpreadsheetMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "About Spreadsheet";
                    this.mUIAboutSpreadsheetMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIAboutSpreadsheetMenuItem.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUIAboutSpreadsheetMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISpreadsheetUsageMenuItem;
        
        private WinMenuItem mUIAboutSpreadsheetMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISheetTitleBar : WinTitleBar
    {
        
        public UISheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIEnterWindow : WinWindow
    {
        
        public UIEnterWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "enterButton";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public WinButton UIEnterButton
        {
            get
            {
                if ((this.mUIEnterButton == null))
                {
                    this.mUIEnterButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIEnterButton.SearchProperties[WinButton.PropertyNames.Name] = "Enter";
                    this.mUIEnterButton.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUIEnterButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIEnterButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "A1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICellErrorWindow : WinWindow
    {
        
        public UICellErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Cell Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Cell Error");
            #endregion
        }
        
        #region Properties
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Cell Error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Cell Error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUsageWindow : WinWindow
    {
        
        public UIUsageWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Usage";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Usage");
            #endregion
        }
        
        #region Properties
        public UIOKWindow1 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow1(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow1 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow1 : WinWindow
    {
        
        public UIOKWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Usage");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Usage");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIAboutWindow : WinWindow
    {
        
        public UIAboutWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "About";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("About");
            #endregion
        }
        
        #region Properties
        public UIOKWindow2 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow2(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow2 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow2 : WinWindow
    {
        
        public UIOKWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("About");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("About");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISheetWindow1 : WinWindow
    {
        
        public UISheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Sheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuStripMenuBar1 UIFileMenuStripMenuBar
        {
            get
            {
                if ((this.mUIFileMenuStripMenuBar == null))
                {
                    this.mUIFileMenuStripMenuBar = new UIFileMenuStripMenuBar1(this);
                }
                return this.mUIFileMenuStripMenuBar;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIMenuStrip1Window UIMenuStrip1Window
        {
            get
            {
                if ((this.mUIMenuStrip1Window == null))
                {
                    this.mUIMenuStrip1Window = new UIMenuStrip1Window(this);
                }
                return this.mUIMenuStrip1Window;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuStripMenuBar1 mUIFileMenuStripMenuBar;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIMenuStrip1Window mUIMenuStrip1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuStripMenuBar1 : WinMenuBar
    {
        
        public UIFileMenuStripMenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As ...";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUISaveAsMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIMenuStrip1Window : WinWindow
    {
        
        public UIMenuStrip1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "fileMenuStrip";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public WinMenuBar UIFileMenuStripMenuBar
        {
            get
            {
                if ((this.mUIFileMenuStripMenuBar == null))
                {
                    this.mUIFileMenuStripMenuBar = new WinMenuBar(this);
                    #region Search Criteria
                    this.mUIFileMenuStripMenuBar.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
                    this.mUIFileMenuStripMenuBar.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUIFileMenuStripMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuBar mUIFileMenuStripMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIUnsavedWarningWindow : WinWindow
    {
        
        public UIUnsavedWarningWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Unsaved Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Unsaved Warning");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public WinControl UIUnsavedWarningDialog
        {
            get
            {
                if ((this.mUIUnsavedWarningDialog == null))
                {
                    this.mUIUnsavedWarningDialog = new WinControl(this);
                    #region Search Criteria
                    this.mUIUnsavedWarningDialog.SearchProperties[UITestControl.PropertyNames.Name] = "Unsaved Warning";
                    this.mUIUnsavedWarningDialog.SearchProperties[UITestControl.PropertyNames.ControlType] = "Dialog";
                    this.mUIUnsavedWarningDialog.WindowTitles.Add("Unsaved Warning");
                    #endregion
                }
                return this.mUIUnsavedWarningDialog;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        
        private UIYesWindow mUIYesWindow;
        
        private WinControl mUIUnsavedWarningDialog;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Unsaved Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Unsaved Warning");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Unsaved Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Unsaved Warning");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISheetWindow2 : WinWindow
    {
        
        public UISheetWindow2()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Sheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "3";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuStripMenuBar2 UIFileMenuStripMenuBar
        {
            get
            {
                if ((this.mUIFileMenuStripMenuBar == null))
                {
                    this.mUIFileMenuStripMenuBar = new UIFileMenuStripMenuBar2(this);
                }
                return this.mUIFileMenuStripMenuBar;
            }
        }
        
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UISpreadsheetPanel1Window UISpreadsheetPanel1Window
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Window == null))
                {
                    this.mUISpreadsheetPanel1Window = new UISpreadsheetPanel1Window(this);
                }
                return this.mUISpreadsheetPanel1Window;
            }
        }
        
        public UISheetTitleBar1 UISheetTitleBar
        {
            get
            {
                if ((this.mUISheetTitleBar == null))
                {
                    this.mUISheetTitleBar = new UISheetTitleBar1(this);
                }
                return this.mUISheetTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuStripMenuBar2 mUIFileMenuStripMenuBar;
        
        private UIItemWindow4 mUIItemWindow;
        
        private UIItemWindow12 mUIItemWindow1;
        
        private UISpreadsheetPanel1Window mUISpreadsheetPanel1Window;
        
        private UISheetTitleBar1 mUISheetTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuStripMenuBar2 : WinMenuBar
    {
        
        public UIFileMenuStripMenuBar2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip1";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem2 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem2(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem2 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIFileMenuItem2 : WinMenuItem
    {
        
        public UIFileMenuItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISpreadsheetPanel1Window : WinWindow
    {
        
        public UISpreadsheetPanel1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "spreadsheetPanel1";
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISheetTitleBar1 : WinTitleBar
    {
        
        public UISheetTitleBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Sheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Sheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICancelWindow mUICancelWindow;
        
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISaveErrorWindow : WinWindow
    {
        
        public UISaveErrorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save Error";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save Error");
            #endregion
        }
        
        #region Properties
        public UIOKWindow3 UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow3(this);
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOKWindow3 mUIOKWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow3 : WinWindow
    {
        
        public UIOKWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save Error");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Save Error");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UINOWindow1 : WinWindow
    {
        
        public UINOWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "&No";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("&No");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("&No");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIYesWindow1 : WinWindow
    {
        
        public UIYesWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "&Yes";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("&Yes");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("&Yes");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow5 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow5(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UIOpenWindow2 UIOpenWindow2
        {
            get
            {
                if ((this.mUIOpenWindow2 == null))
                {
                    this.mUIOpenWindow2 = new UIOpenWindow2(this);
                }
                return this.mUIOpenWindow2;
            }
        }
        
        public UIItemWindow13 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow13(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UICancelWindow1 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow1(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow5 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UIOpenWindow2 mUIOpenWindow2;
        
        private UIItemWindow13 mUIItemWindow1;
        
        private UICancelWindow1 mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITest1sprdListItem UITest1sprdListItem
        {
            get
            {
                if ((this.mUITest1sprdListItem == null))
                {
                    this.mUITest1sprdListItem = new UITest1sprdListItem(this);
                }
                return this.mUITest1sprdListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITest1sprdListItem mUITest1sprdListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UITest1sprdListItem : WinListItem
    {
        
        public UITest1sprdListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test1.sprd";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow2 : WinWindow
    {
        
        public UIOpenWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow13 : WinWindow
    {
        
        public UIItemWindow13(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICancelWindow1 : WinWindow
    {
        
        public UICancelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow11 : WinWindow
    {
        
        public UIOpenWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIOpenPane UIOpenPane
        {
            get
            {
                if ((this.mUIOpenPane == null))
                {
                    this.mUIOpenPane = new UIOpenPane(this);
                }
                return this.mUIOpenPane;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenPane mUIOpenPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenPane : WinPane
    {
        
        public UIOpenPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Open";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
